List 자료형에는 ArrayList, LinkedList 등의 List 인터페이스를 구현한 자료형이 있다.

Method:

[ add 메소드 ]
공격을 총 3번 상대방의 체력이 20, 18, 16으로 깍였다면 다음과 같이 코드를 작성
List<String> attack_speed = new ArrayList<String>();
리스트를 선언 할때는 명확한 타입을 명시하는 것이 코드 효율성에 좋다.
즉 객체를 포함하는 자료형도 어떤 객체를 포함하는지에 대해서 명확하게 표현하는 것이다.
ex: Integer, String, Char, Float, Double
attack_speed.add("20");
attack_speed.add("18");
attack_speed.add("16");

add라는 메소드를 이용하여 공격 받은 플레이어의 체력을 저장했다.
만약 처음에 공격 받았을때 플레이어의 체력을 5라는 체력을 삽입하고 싶다면 다음과 같이 코드 작성
attack_speed.add(0, "5"); // 첫번째 위치에 5 삽입
즉 attack_speed.add(위치, 값);

[ get 메소드 ]
공격을 받았을 때 2번째 플레이어의 체력을 불러오고 싶다면 다음과 같이 코드 작성
System.out.println(attack_speed.get(1));
프로그램을 조금 할 경우 알 수 있지만 System.out.println()은 출력문이다.

[ size 메소드 ]
size 메소드는 List의 갯수를 리턴(반환)한다.
System.out.pritnln(attack_speed.size())
즉 우리가 리스트에 저장한 값은 총 0~2 3개이므로 3이 반환될것이다.

[ contains 메소드 ]
contains 메소드는 리스트 안에 항목값이 있는지를 판별하여 그 결과를 참,거짓으로 리턴(반환)한다.
System.out.println(attack_speed.contains("30"));
우리가 저장한 리스트는 30이란 값을 포함하고 있지 않으므로 false를 반환할 것이다.

[ remove 메소드 ]
remove 메소드는 2개의 방식이 있다.
1. remove(객체)
2. remove(인덱스)

remove(객체)의 경우는 리스트에서 객체에 해당되는 항목을 삭제하고 삭제한 결과를 리턴(반환)한다.
System.out.println(attack_speed.remove("20"));
리턴 결과는 true이다. 리스트에 값 20 항목을 성공적으로 삭제하고 true를 리턴하는 것이다.

remove(인덱스)의 경우는 해당 인덱스의 항목을 삭제하고 삭제한 항목을 리턴(반환)한다.
System.out.println(attack_speed.remove(0));
리턴 결과는 20이다. 리스트의 첫번째 항목은 "20"이므로 "20"이 삭제된 후 "20"을 리턴했다.



