Set 자료형에는 HashSet, TreeSet등의 인터페이스를 구현한 자료형이 있다.

Set은 한국말로는 "집합"이고, Set의 특징은 Set은 중복 값을 삽입할 수 없고, 특정한 순서를 가지고 있지 않다.

HastSet은 저장공간보다 값이 추가로 들어오면 List처럼 공간을 늘리는데 Set은 한 칸씩 저장 공간을 늘리지 않고
저장 용량을 약 두배로 늘린다. 여기서 과부하가 많이 발생하므로, 초기에 저장할 데이터 갯수를 안다면 Set의 초기 용량을 지정 해주는 것이 좋다.
HashSet<Integer> set = new HashSet<Integer>(5); // 초기 용량을 5로 지정

Method:

[ add 메소드 ]
HashSet<Integer> set = new HashSet<Integer>(); // HashSet 생성 또는 선언
add 메소드는 Set에 값을 추가할 때 사용하는 메소드이다.
set.add(2); // 값 추가

[ size 메소드 ]
size 메소드는 Set의 크기(갯수)를 리턴(반환)한다.
System.out.println(set.size());
현재 위 코드에 값은 1개만 추가 됬으므로 크기는 1이므로 1이 반환될 것이다.

[ contains 메소드 ]
contains 메소드는 Set안에 항목값이 잇는지를 판별하여 그 결과를 참,거짓으로 리턴(반환)한다.
System.out.println(set.contains(2));
현재 위 코드에서 3이란 값을 추가 했으므로 3의 항목값은 존재하므로 true를 리턴(반환)할것이다.

[ remove 메소드 ]
remove 메소드는 Set에 값을 제거할 때 사용하는 메소드이다.
remove(매개변수) 매개변수 값이 Set 내부에 존재한다면 그 값을 삭제한 후 true를 리턴(반환)하고 없다면 false를 리턴(반환)한다.
모든 Set의 값을 제거하고 싶다면 clear() 메소드를 이용할 수 있다.


